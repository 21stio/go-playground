// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feedselect/feedselect_.proto

/*
Package feedselect is a generated protocol buffer package.

It is generated from these files:
	feedselect/feedselect_.proto

It has these top-level messages:
	PostSelect
	PostsSelect
	SocialAccountsSelect
	FeedSelect
	SocialAccountSelect
*/
package feedselect

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import textselect "github.com/21stio/go-playground/grpc/schema/textselect"
import mediasselect "github.com/21stio/go-playground/grpc/schema/mediasselect"
import idsselect "github.com/21stio/go-playground/grpc/schema/idsselect"
import serviceselect "github.com/21stio/go-playground/grpc/schema/serviceselect"
import feedfilter "github.com/21stio/go-playground/grpc/schema/feedfilter"
import postsort "github.com/21stio/go-playground/grpc/schema/postsort"
import page "github.com/21stio/go-playground/grpc/schema/page"
import feedsort "github.com/21stio/go-playground/grpc/schema/feedsort"
import infoselect "github.com/21stio/go-playground/grpc/schema/infoselect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PostSelect struct {
	SelectAll        *bool                         `protobuf:"varint,1,opt,name=selectAll" json:"selectAll,omitempty"`
	Author           *SocialAccountSelect          `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Content          *textselect.TextSelect        `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	LikeTerm         *bool                         `protobuf:"varint,4,opt,name=likeTerm" json:"likeTerm,omitempty"`
	LikesCount       *bool                         `protobuf:"varint,5,opt,name=likesCount" json:"likesCount,omitempty"`
	LikedBy          *SocialAccountsSelect         `protobuf:"bytes,6,opt,name=likedBy" json:"likedBy,omitempty"`
	CommentTerm      *bool                         `protobuf:"varint,7,opt,name=commentTerm" json:"commentTerm,omitempty"`
	CommentsCount    *bool                         `protobuf:"varint,8,opt,name=commentsCount" json:"commentsCount,omitempty"`
	CommentedBy      *SocialAccountsSelect         `protobuf:"bytes,9,opt,name=commentedBy" json:"commentedBy,omitempty"`
	Comments         *PostsSelect                  `protobuf:"bytes,10,opt,name=comments" json:"comments,omitempty"`
	Commenting       *PostSelect                   `protobuf:"bytes,11,opt,name=commenting" json:"commenting,omitempty"`
	ShareTerm        *bool                         `protobuf:"varint,12,opt,name=shareTerm" json:"shareTerm,omitempty"`
	SharesCount      *bool                         `protobuf:"varint,13,opt,name=sharesCount" json:"sharesCount,omitempty"`
	Shared           *PostSelect                   `protobuf:"bytes,14,opt,name=shared" json:"shared,omitempty"`
	SharedBy         *SocialAccountsSelect         `protobuf:"bytes,15,opt,name=sharedBy" json:"sharedBy,omitempty"`
	Attachments      *mediasselect.MediasSelect    `protobuf:"bytes,16,opt,name=attachments" json:"attachments,omitempty"`
	SelectHash       *bool                         `protobuf:"varint,17,opt,name=selectHash" json:"selectHash,omitempty"`
	Ids              *idsselect.IdsSelect          `protobuf:"bytes,18,opt,name=ids" json:"ids,omitempty"`
	Meta             *serviceselect.TypeMetaSelect `protobuf:"bytes,19,opt,name=meta" json:"meta,omitempty"`
	Hash             *string                       `protobuf:"bytes,20,opt,name=hash" json:"hash,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *PostSelect) Reset()                    { *m = PostSelect{} }
func (m *PostSelect) String() string            { return proto.CompactTextString(m) }
func (*PostSelect) ProtoMessage()               {}
func (*PostSelect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PostSelect) GetSelectAll() bool {
	if m != nil && m.SelectAll != nil {
		return *m.SelectAll
	}
	return false
}

func (m *PostSelect) GetAuthor() *SocialAccountSelect {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *PostSelect) GetContent() *textselect.TextSelect {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *PostSelect) GetLikeTerm() bool {
	if m != nil && m.LikeTerm != nil {
		return *m.LikeTerm
	}
	return false
}

func (m *PostSelect) GetLikesCount() bool {
	if m != nil && m.LikesCount != nil {
		return *m.LikesCount
	}
	return false
}

func (m *PostSelect) GetLikedBy() *SocialAccountsSelect {
	if m != nil {
		return m.LikedBy
	}
	return nil
}

func (m *PostSelect) GetCommentTerm() bool {
	if m != nil && m.CommentTerm != nil {
		return *m.CommentTerm
	}
	return false
}

func (m *PostSelect) GetCommentsCount() bool {
	if m != nil && m.CommentsCount != nil {
		return *m.CommentsCount
	}
	return false
}

func (m *PostSelect) GetCommentedBy() *SocialAccountsSelect {
	if m != nil {
		return m.CommentedBy
	}
	return nil
}

func (m *PostSelect) GetComments() *PostsSelect {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *PostSelect) GetCommenting() *PostSelect {
	if m != nil {
		return m.Commenting
	}
	return nil
}

func (m *PostSelect) GetShareTerm() bool {
	if m != nil && m.ShareTerm != nil {
		return *m.ShareTerm
	}
	return false
}

func (m *PostSelect) GetSharesCount() bool {
	if m != nil && m.SharesCount != nil {
		return *m.SharesCount
	}
	return false
}

func (m *PostSelect) GetShared() *PostSelect {
	if m != nil {
		return m.Shared
	}
	return nil
}

func (m *PostSelect) GetSharedBy() *SocialAccountsSelect {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

func (m *PostSelect) GetAttachments() *mediasselect.MediasSelect {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *PostSelect) GetSelectHash() bool {
	if m != nil && m.SelectHash != nil {
		return *m.SelectHash
	}
	return false
}

func (m *PostSelect) GetIds() *idsselect.IdsSelect {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *PostSelect) GetMeta() *serviceselect.TypeMetaSelect {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PostSelect) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

type PostsSelect struct {
	Filter           *feedfilter.PostFilter        `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	Sort             *postsort.PostSort            `protobuf:"bytes,2,opt,name=sort" json:"sort,omitempty"`
	Page             *page.Page                    `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
	SelectAll        *bool                         `protobuf:"varint,4,opt,name=selectAll" json:"selectAll,omitempty"`
	Author           *SocialAccountSelect          `protobuf:"bytes,5,opt,name=author" json:"author,omitempty"`
	Content          *textselect.TextSelect        `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	LikeTerm         *bool                         `protobuf:"varint,7,opt,name=likeTerm" json:"likeTerm,omitempty"`
	LikesCount       *bool                         `protobuf:"varint,8,opt,name=likesCount" json:"likesCount,omitempty"`
	LikedBy          *SocialAccountsSelect         `protobuf:"bytes,9,opt,name=likedBy" json:"likedBy,omitempty"`
	CommentTerm      *bool                         `protobuf:"varint,10,opt,name=commentTerm" json:"commentTerm,omitempty"`
	CommentsCount    *bool                         `protobuf:"varint,11,opt,name=commentsCount" json:"commentsCount,omitempty"`
	CommentedBy      *SocialAccountsSelect         `protobuf:"bytes,12,opt,name=commentedBy" json:"commentedBy,omitempty"`
	Comments         *PostsSelect                  `protobuf:"bytes,13,opt,name=comments" json:"comments,omitempty"`
	Commenting       *PostSelect                   `protobuf:"bytes,14,opt,name=commenting" json:"commenting,omitempty"`
	ShareTerm        *bool                         `protobuf:"varint,15,opt,name=shareTerm" json:"shareTerm,omitempty"`
	SharesCount      *bool                         `protobuf:"varint,16,opt,name=sharesCount" json:"sharesCount,omitempty"`
	Shared           *PostSelect                   `protobuf:"bytes,17,opt,name=shared" json:"shared,omitempty"`
	SharedBy         *SocialAccountsSelect         `protobuf:"bytes,18,opt,name=sharedBy" json:"sharedBy,omitempty"`
	Attachments      *mediasselect.MediasSelect    `protobuf:"bytes,19,opt,name=attachments" json:"attachments,omitempty"`
	SelectHash       *bool                         `protobuf:"varint,20,opt,name=selectHash" json:"selectHash,omitempty"`
	Ids              *idsselect.IdsSelect          `protobuf:"bytes,21,opt,name=ids" json:"ids,omitempty"`
	Meta             *serviceselect.TypeMetaSelect `protobuf:"bytes,22,opt,name=meta" json:"meta,omitempty"`
	Hash             *string                       `protobuf:"bytes,23,opt,name=hash" json:"hash,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *PostsSelect) Reset()                    { *m = PostsSelect{} }
func (m *PostsSelect) String() string            { return proto.CompactTextString(m) }
func (*PostsSelect) ProtoMessage()               {}
func (*PostsSelect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PostsSelect) GetFilter() *feedfilter.PostFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *PostsSelect) GetSort() *postsort.PostSort {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *PostsSelect) GetPage() *page.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *PostsSelect) GetSelectAll() bool {
	if m != nil && m.SelectAll != nil {
		return *m.SelectAll
	}
	return false
}

func (m *PostsSelect) GetAuthor() *SocialAccountSelect {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *PostsSelect) GetContent() *textselect.TextSelect {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *PostsSelect) GetLikeTerm() bool {
	if m != nil && m.LikeTerm != nil {
		return *m.LikeTerm
	}
	return false
}

func (m *PostsSelect) GetLikesCount() bool {
	if m != nil && m.LikesCount != nil {
		return *m.LikesCount
	}
	return false
}

func (m *PostsSelect) GetLikedBy() *SocialAccountsSelect {
	if m != nil {
		return m.LikedBy
	}
	return nil
}

func (m *PostsSelect) GetCommentTerm() bool {
	if m != nil && m.CommentTerm != nil {
		return *m.CommentTerm
	}
	return false
}

func (m *PostsSelect) GetCommentsCount() bool {
	if m != nil && m.CommentsCount != nil {
		return *m.CommentsCount
	}
	return false
}

func (m *PostsSelect) GetCommentedBy() *SocialAccountsSelect {
	if m != nil {
		return m.CommentedBy
	}
	return nil
}

func (m *PostsSelect) GetComments() *PostsSelect {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *PostsSelect) GetCommenting() *PostSelect {
	if m != nil {
		return m.Commenting
	}
	return nil
}

func (m *PostsSelect) GetShareTerm() bool {
	if m != nil && m.ShareTerm != nil {
		return *m.ShareTerm
	}
	return false
}

func (m *PostsSelect) GetSharesCount() bool {
	if m != nil && m.SharesCount != nil {
		return *m.SharesCount
	}
	return false
}

func (m *PostsSelect) GetShared() *PostSelect {
	if m != nil {
		return m.Shared
	}
	return nil
}

func (m *PostsSelect) GetSharedBy() *SocialAccountsSelect {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

func (m *PostsSelect) GetAttachments() *mediasselect.MediasSelect {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *PostsSelect) GetSelectHash() bool {
	if m != nil && m.SelectHash != nil {
		return *m.SelectHash
	}
	return false
}

func (m *PostsSelect) GetIds() *idsselect.IdsSelect {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *PostsSelect) GetMeta() *serviceselect.TypeMetaSelect {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PostsSelect) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

type SocialAccountsSelect struct {
	Filter           *feedfilter.SocialAccountFilter `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	Sort             *feedsort.SocialAccountSort     `protobuf:"bytes,2,opt,name=sort" json:"sort,omitempty"`
	Page             *page.Page                      `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
	SelectAll        *bool                           `protobuf:"varint,4,opt,name=selectAll" json:"selectAll,omitempty"`
	Info             *infoselect.InfoSelect          `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
	Kind             *bool                           `protobuf:"varint,6,opt,name=kind" json:"kind,omitempty"`
	FollowersCount   *bool                           `protobuf:"varint,7,opt,name=followersCount" json:"followersCount,omitempty"`
	Followers        *SocialAccountsSelect           `protobuf:"bytes,8,opt,name=followers" json:"followers,omitempty"`
	FollowingCount   *bool                           `protobuf:"varint,9,opt,name=followingCount" json:"followingCount,omitempty"`
	Following        *SocialAccountsSelect           `protobuf:"bytes,10,opt,name=following" json:"following,omitempty"`
	FriendsCount     *bool                           `protobuf:"varint,11,opt,name=friendsCount" json:"friendsCount,omitempty"`
	Friends          *SocialAccountsSelect           `protobuf:"bytes,12,opt,name=friends" json:"friends,omitempty"`
	Feed             *FeedSelect                     `protobuf:"bytes,13,opt,name=feed" json:"feed,omitempty"`
	Posts            *PostsSelect                    `protobuf:"bytes,14,opt,name=posts" json:"posts,omitempty"`
	SelectHash       *bool                           `protobuf:"varint,15,opt,name=selectHash" json:"selectHash,omitempty"`
	Ids              *idsselect.IdsSelect            `protobuf:"bytes,16,opt,name=ids" json:"ids,omitempty"`
	Meta             *serviceselect.TypeMetaSelect   `protobuf:"bytes,17,opt,name=meta" json:"meta,omitempty"`
	Hash             *string                         `protobuf:"bytes,18,opt,name=hash" json:"hash,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *SocialAccountsSelect) Reset()                    { *m = SocialAccountsSelect{} }
func (m *SocialAccountsSelect) String() string            { return proto.CompactTextString(m) }
func (*SocialAccountsSelect) ProtoMessage()               {}
func (*SocialAccountsSelect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SocialAccountsSelect) GetFilter() *feedfilter.SocialAccountFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *SocialAccountsSelect) GetSort() *feedsort.SocialAccountSort {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *SocialAccountsSelect) GetPage() *page.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *SocialAccountsSelect) GetSelectAll() bool {
	if m != nil && m.SelectAll != nil {
		return *m.SelectAll
	}
	return false
}

func (m *SocialAccountsSelect) GetInfo() *infoselect.InfoSelect {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SocialAccountsSelect) GetKind() bool {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return false
}

func (m *SocialAccountsSelect) GetFollowersCount() bool {
	if m != nil && m.FollowersCount != nil {
		return *m.FollowersCount
	}
	return false
}

func (m *SocialAccountsSelect) GetFollowers() *SocialAccountsSelect {
	if m != nil {
		return m.Followers
	}
	return nil
}

func (m *SocialAccountsSelect) GetFollowingCount() bool {
	if m != nil && m.FollowingCount != nil {
		return *m.FollowingCount
	}
	return false
}

func (m *SocialAccountsSelect) GetFollowing() *SocialAccountsSelect {
	if m != nil {
		return m.Following
	}
	return nil
}

func (m *SocialAccountsSelect) GetFriendsCount() bool {
	if m != nil && m.FriendsCount != nil {
		return *m.FriendsCount
	}
	return false
}

func (m *SocialAccountsSelect) GetFriends() *SocialAccountsSelect {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *SocialAccountsSelect) GetFeed() *FeedSelect {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *SocialAccountsSelect) GetPosts() *PostsSelect {
	if m != nil {
		return m.Posts
	}
	return nil
}

func (m *SocialAccountsSelect) GetSelectHash() bool {
	if m != nil && m.SelectHash != nil {
		return *m.SelectHash
	}
	return false
}

func (m *SocialAccountsSelect) GetIds() *idsselect.IdsSelect {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *SocialAccountsSelect) GetMeta() *serviceselect.TypeMetaSelect {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SocialAccountsSelect) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

type FeedSelect struct {
	SelectAll        *bool                         `protobuf:"varint,1,opt,name=selectAll" json:"selectAll,omitempty"`
	Kind             *bool                         `protobuf:"varint,2,opt,name=kind" json:"kind,omitempty"`
	Info             *infoselect.InfoSelect        `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
	CreatedBy        *SocialAccountSelect          `protobuf:"bytes,4,opt,name=createdBy" json:"createdBy,omitempty"`
	Count            *bool                         `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Posts            *PostsSelect                  `protobuf:"bytes,6,opt,name=posts" json:"posts,omitempty"`
	SelectHash       *bool                         `protobuf:"varint,7,opt,name=selectHash" json:"selectHash,omitempty"`
	Ids              *idsselect.IdsSelect          `protobuf:"bytes,8,opt,name=ids" json:"ids,omitempty"`
	Meta             *serviceselect.TypeMetaSelect `protobuf:"bytes,9,opt,name=meta" json:"meta,omitempty"`
	Hash             *string                       `protobuf:"bytes,10,opt,name=hash" json:"hash,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *FeedSelect) Reset()                    { *m = FeedSelect{} }
func (m *FeedSelect) String() string            { return proto.CompactTextString(m) }
func (*FeedSelect) ProtoMessage()               {}
func (*FeedSelect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FeedSelect) GetSelectAll() bool {
	if m != nil && m.SelectAll != nil {
		return *m.SelectAll
	}
	return false
}

func (m *FeedSelect) GetKind() bool {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return false
}

func (m *FeedSelect) GetInfo() *infoselect.InfoSelect {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *FeedSelect) GetCreatedBy() *SocialAccountSelect {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *FeedSelect) GetCount() bool {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return false
}

func (m *FeedSelect) GetPosts() *PostsSelect {
	if m != nil {
		return m.Posts
	}
	return nil
}

func (m *FeedSelect) GetSelectHash() bool {
	if m != nil && m.SelectHash != nil {
		return *m.SelectHash
	}
	return false
}

func (m *FeedSelect) GetIds() *idsselect.IdsSelect {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *FeedSelect) GetMeta() *serviceselect.TypeMetaSelect {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *FeedSelect) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

type SocialAccountSelect struct {
	SelectAll        *bool                         `protobuf:"varint,1,opt,name=selectAll" json:"selectAll,omitempty"`
	Info             *infoselect.InfoSelect        `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Kind             *bool                         `protobuf:"varint,3,opt,name=kind" json:"kind,omitempty"`
	FollowersCount   *bool                         `protobuf:"varint,4,opt,name=followersCount" json:"followersCount,omitempty"`
	Followers        *SocialAccountsSelect         `protobuf:"bytes,5,opt,name=followers" json:"followers,omitempty"`
	FollowingCount   *bool                         `protobuf:"varint,6,opt,name=followingCount" json:"followingCount,omitempty"`
	Following        *SocialAccountsSelect         `protobuf:"bytes,7,opt,name=following" json:"following,omitempty"`
	FriendsCount     *bool                         `protobuf:"varint,8,opt,name=friendsCount" json:"friendsCount,omitempty"`
	Friends          *SocialAccountsSelect         `protobuf:"bytes,9,opt,name=friends" json:"friends,omitempty"`
	Feed             *FeedSelect                   `protobuf:"bytes,10,opt,name=feed" json:"feed,omitempty"`
	Posts            *PostsSelect                  `protobuf:"bytes,11,opt,name=posts" json:"posts,omitempty"`
	SelectHash       *bool                         `protobuf:"varint,12,opt,name=selectHash" json:"selectHash,omitempty"`
	Ids              *idsselect.IdsSelect          `protobuf:"bytes,13,opt,name=ids" json:"ids,omitempty"`
	Meta             *serviceselect.TypeMetaSelect `protobuf:"bytes,14,opt,name=meta" json:"meta,omitempty"`
	Hash             *string                       `protobuf:"bytes,15,opt,name=hash" json:"hash,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *SocialAccountSelect) Reset()                    { *m = SocialAccountSelect{} }
func (m *SocialAccountSelect) String() string            { return proto.CompactTextString(m) }
func (*SocialAccountSelect) ProtoMessage()               {}
func (*SocialAccountSelect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SocialAccountSelect) GetSelectAll() bool {
	if m != nil && m.SelectAll != nil {
		return *m.SelectAll
	}
	return false
}

func (m *SocialAccountSelect) GetInfo() *infoselect.InfoSelect {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SocialAccountSelect) GetKind() bool {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return false
}

func (m *SocialAccountSelect) GetFollowersCount() bool {
	if m != nil && m.FollowersCount != nil {
		return *m.FollowersCount
	}
	return false
}

func (m *SocialAccountSelect) GetFollowers() *SocialAccountsSelect {
	if m != nil {
		return m.Followers
	}
	return nil
}

func (m *SocialAccountSelect) GetFollowingCount() bool {
	if m != nil && m.FollowingCount != nil {
		return *m.FollowingCount
	}
	return false
}

func (m *SocialAccountSelect) GetFollowing() *SocialAccountsSelect {
	if m != nil {
		return m.Following
	}
	return nil
}

func (m *SocialAccountSelect) GetFriendsCount() bool {
	if m != nil && m.FriendsCount != nil {
		return *m.FriendsCount
	}
	return false
}

func (m *SocialAccountSelect) GetFriends() *SocialAccountsSelect {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *SocialAccountSelect) GetFeed() *FeedSelect {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *SocialAccountSelect) GetPosts() *PostsSelect {
	if m != nil {
		return m.Posts
	}
	return nil
}

func (m *SocialAccountSelect) GetSelectHash() bool {
	if m != nil && m.SelectHash != nil {
		return *m.SelectHash
	}
	return false
}

func (m *SocialAccountSelect) GetIds() *idsselect.IdsSelect {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *SocialAccountSelect) GetMeta() *serviceselect.TypeMetaSelect {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SocialAccountSelect) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*PostSelect)(nil), "feedselect.PostSelect")
	proto.RegisterType((*PostsSelect)(nil), "feedselect.PostsSelect")
	proto.RegisterType((*SocialAccountsSelect)(nil), "feedselect.SocialAccountsSelect")
	proto.RegisterType((*FeedSelect)(nil), "feedselect.FeedSelect")
	proto.RegisterType((*SocialAccountSelect)(nil), "feedselect.SocialAccountSelect")
}

func init() { proto.RegisterFile("feedselect/feedselect_.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5d, 0x8b, 0xdb, 0x46,
	0x14, 0x65, 0x77, 0x65, 0x4b, 0xba, 0xde, 0xcf, 0x59, 0x77, 0x23, 0xdc, 0x6d, 0x62, 0x96, 0xb2,
	0x2c, 0x85, 0x8c, 0x9a, 0x14, 0xd2, 0x52, 0xd2, 0x42, 0x5c, 0x08, 0xcd, 0x43, 0x20, 0x38, 0xfb,
	0xd4, 0x97, 0xa2, 0x4a, 0x63, 0x59, 0x44, 0xd6, 0x18, 0x69, 0xdc, 0xc6, 0x8f, 0xfd, 0x01, 0x7d,
	0xef, 0x6f, 0x2d, 0x14, 0xc2, 0x8c, 0x66, 0x34, 0x23, 0x13, 0xdb, 0x92, 0xbd, 0x2f, 0xcb, 0xfd,
	0x9c, 0x3b, 0x3a, 0xba, 0xe7, 0x58, 0x0b, 0xd7, 0x13, 0x42, 0xa2, 0x82, 0xa4, 0x24, 0x64, 0xbe,
	0x36, 0x7f, 0xc7, 0xf3, 0x9c, 0x32, 0x8a, 0x40, 0x87, 0x06, 0xd7, 0x8c, 0x7c, 0x64, 0xb2, 0x52,
	0x9b, 0xb2, 0x72, 0x30, 0x9c, 0x91, 0x28, 0x09, 0x0a, 0x99, 0x37, 0x1d, 0x55, 0x31, 0x48, 0x22,
	0x95, 0xae, 0x2c, 0x95, 0xbb, 0x29, 0x48, 0xfe, 0x67, 0x12, 0x12, 0x99, 0xaf, 0x79, 0xaa, 0x46,
	0xdc, 0x74, 0x92, 0xa4, 0x8c, 0xe4, 0xbe, 0x36, 0x55, 0xd6, 0x9b, 0xd3, 0x82, 0x15, 0x34, 0x67,
	0xbe, 0x32, 0x54, 0xe6, 0x7c, 0x1e, 0xc4, 0xc4, 0xe7, 0x7f, 0xaa, 0x5a, 0xf1, 0x54, 0xbc, 0x56,
	0x19, 0xd5, 0x8c, 0x24, 0x9b, 0x50, 0x75, 0xc9, 0xca, 0x94, 0xd9, 0x9b, 0xbf, 0x6d, 0x80, 0x77,
	0xb4, 0x60, 0xef, 0x45, 0x14, 0x5d, 0x83, 0x5b, 0xe6, 0x5f, 0xa5, 0xa9, 0x77, 0x30, 0x3c, 0xb8,
	0x73, 0xc6, 0x3a, 0x80, 0xbe, 0x87, 0x6e, 0xb0, 0x60, 0x53, 0x9a, 0x7b, 0x87, 0xc3, 0x83, 0xbb,
	0xde, 0xf3, 0x27, 0x58, 0x63, 0x89, 0xdf, 0xd3, 0x30, 0x09, 0xd2, 0x57, 0x61, 0x48, 0x17, 0x99,
	0x3c, 0x6e, 0x2c, 0xcb, 0xd1, 0xb7, 0x60, 0x87, 0x34, 0x63, 0x24, 0x63, 0xde, 0x91, 0xe8, 0xbc,
	0xc2, 0x1a, 0x6e, 0x7c, 0x4f, 0x3e, 0xaa, 0x06, 0x55, 0x86, 0x06, 0xe0, 0xa4, 0xc9, 0x07, 0x72,
	0x4f, 0xf2, 0x99, 0x67, 0x89, 0x7b, 0x54, 0x3e, 0x7a, 0x0c, 0xc0, 0xed, 0xe2, 0x17, 0x3e, 0xc9,
	0xeb, 0x88, 0xac, 0x11, 0x41, 0x3f, 0x82, 0xcd, 0xbd, 0x68, 0xb4, 0xf4, 0xba, 0x62, 0xda, 0x70,
	0xed, 0x3d, 0x0b, 0x35, 0x57, 0x36, 0xa0, 0x21, 0xf4, 0x42, 0x3a, 0x9b, 0x91, 0x8c, 0x89, 0xd1,
	0xb6, 0x38, 0xdc, 0x0c, 0xa1, 0xaf, 0xe1, 0x44, 0xba, 0xf2, 0x02, 0x8e, 0xa8, 0xa9, 0x07, 0xd1,
	0xa8, 0x3a, 0x47, 0xdc, 0xc3, 0x6d, 0x78, 0x0f, 0xb3, 0x09, 0x7d, 0x07, 0x8e, 0x3a, 0xd4, 0x03,
	0x71, 0xc0, 0x23, 0xf3, 0x00, 0xfe, 0xda, 0x54, 0x5f, 0x55, 0x88, 0x5e, 0x00, 0x48, 0x3b, 0xc9,
	0x62, 0xaf, 0x27, 0xd1, 0x5e, 0x69, 0x93, 0x5d, 0x46, 0xa5, 0x78, 0xf3, 0xd3, 0x20, 0x2f, 0x11,
	0x3f, 0x96, 0x6f, 0x5e, 0x05, 0x38, 0x2c, 0xc2, 0x91, 0x8f, 0x7c, 0x52, 0xc2, 0x62, 0x84, 0x10,
	0x86, 0xae, 0x70, 0x23, 0xef, 0x74, 0xe3, 0x4c, 0x59, 0x85, 0x5e, 0x82, 0x53, 0x5a, 0xa3, 0xa5,
	0x77, 0xd6, 0x10, 0x9d, 0xaa, 0x03, 0xbd, 0x84, 0x5e, 0xc0, 0x58, 0x10, 0x4e, 0x4b, 0x74, 0xce,
	0xc5, 0x01, 0x03, 0x6c, 0x72, 0x14, 0xbf, 0x15, 0x8e, 0x02, 0xd6, 0x28, 0xe7, 0x0b, 0x54, 0xd6,
	0xfc, 0x1a, 0x14, 0x53, 0xef, 0xa2, 0x5c, 0x20, 0x1d, 0x41, 0xb7, 0x70, 0x94, 0x44, 0x85, 0x87,
	0xc4, 0xa9, 0x7d, 0x5c, 0x51, 0x1b, 0xbf, 0x89, 0xd4, 0x79, 0xbc, 0x00, 0x3d, 0x03, 0x6b, 0x46,
	0x58, 0xe0, 0x5d, 0x8a, 0xc2, 0xaf, 0x70, 0x8d, 0xe3, 0xf8, 0x7e, 0x39, 0x27, 0x6f, 0x09, 0x0b,
	0x64, 0x87, 0x28, 0x45, 0x08, 0xac, 0x29, 0x1f, 0xda, 0x1f, 0x1e, 0xdc, 0xb9, 0x63, 0x61, 0xdf,
	0xfc, 0x67, 0x43, 0xcf, 0x78, 0x99, 0x1c, 0xca, 0x52, 0x08, 0x04, 0x03, 0x15, 0x94, 0x65, 0x48,
	0x40, 0xf9, 0x5a, 0x98, 0x63, 0x59, 0x85, 0x6e, 0xc1, 0xe2, 0x84, 0x97, 0xa4, 0x44, 0x58, 0xa9,
	0x45, 0x09, 0x3b, 0xcd, 0xd9, 0x58, 0xe4, 0xd1, 0x63, 0xb0, 0xb8, 0x64, 0x48, 0x0a, 0x02, 0xe6,
	0x0e, 0x7e, 0x17, 0xc4, 0x64, 0x2c, 0xe2, 0x75, 0xf2, 0x5b, 0xeb, 0xc9, 0xdf, 0xd9, 0x99, 0xfc,
	0xdd, 0xf6, 0xe4, 0xb7, 0x37, 0x92, 0xdf, 0xd9, 0x44, 0x7e, 0x77, 0x4f, 0xf2, 0x43, 0x03, 0xf2,
	0xf7, 0x1a, 0x90, 0xff, 0x78, 0x5f, 0xf2, 0x9f, 0xec, 0x46, 0xfe, 0xd3, 0xdd, 0xc8, 0x7f, 0xb6,
	0x85, 0xfc, 0xe7, 0x9b, 0xc8, 0x7f, 0xd1, 0x9a, 0xfc, 0x68, 0x5f, 0xf2, 0x5f, 0xee, 0x43, 0xfe,
	0xfe, 0x3a, 0xf2, 0x7f, 0xd1, 0x94, 0xfc, 0x57, 0xed, 0xc9, 0xff, 0xc8, 0x20, 0xff, 0xbf, 0x5d,
	0xe8, 0x7f, 0xee, 0x79, 0x39, 0xdf, 0x6a, 0x2a, 0xf0, 0xc4, 0x54, 0x81, 0x5a, 0xc7, 0x8a, 0x1c,
	0xf8, 0x35, 0x39, 0xf8, 0x12, 0xab, 0x0f, 0x82, 0x15, 0x92, 0x3e, 0x94, 0x2e, 0x7c, 0x03, 0x16,
	0xff, 0xac, 0x90, 0xaa, 0x70, 0x85, 0xf5, 0x37, 0x06, 0x7e, 0x93, 0x4d, 0xa8, 0x02, 0x80, 0x87,
	0x39, 0x00, 0x1f, 0x92, 0x2c, 0x12, 0x3a, 0xe0, 0x8c, 0x85, 0x8d, 0x6e, 0xe1, 0x74, 0x42, 0xd3,
	0x94, 0xfe, 0x45, 0x72, 0xb9, 0x60, 0x25, 0xe5, 0x57, 0xa2, 0xe8, 0x67, 0x70, 0xab, 0x88, 0xe0,
	0x7d, 0x93, 0xa5, 0xd1, 0x2d, 0x7a, 0x4e, 0x92, 0xc5, 0xe5, 0x1c, 0xd7, 0x9c, 0xa3, 0xa2, 0x7a,
	0x0e, 0xa7, 0x10, 0xb4, 0x9b, 0xc3, 0xb9, 0x74, 0x03, 0xc7, 0x93, 0x3c, 0x21, 0x59, 0x54, 0x53,
	0x88, 0x5a, 0x8c, 0x8b, 0x94, 0xf4, 0x1b, 0x8b, 0x83, 0x6a, 0xe0, 0x78, 0xf3, 0x5a, 0x29, 0x0a,
	0x35, 0xa6, 0xbd, 0x26, 0x24, 0x52, 0x78, 0xf3, 0x30, 0x7a, 0x0a, 0x1d, 0xf1, 0x63, 0x20, 0xa5,
	0x60, 0xad, 0x82, 0x94, 0x55, 0x2b, 0xd4, 0x38, 0x5b, 0x47, 0x8d, 0xf3, 0xa6, 0xd4, 0xb8, 0x68,
	0x4f, 0x0d, 0x64, 0x50, 0xe3, 0xff, 0x43, 0x00, 0xfd, 0x48, 0x5b, 0xbe, 0x4d, 0xd5, 0x6a, 0x1d,
	0x1a, 0xab, 0xa5, 0x56, 0xf3, 0xa8, 0xc1, 0x6a, 0xfe, 0x04, 0x6e, 0x98, 0x93, 0xa0, 0x54, 0x6c,
	0xab, 0xd9, 0x2f, 0x9c, 0xee, 0x40, 0x7d, 0xe8, 0x84, 0xc6, 0xe7, 0x68, 0xe9, 0x68, 0xfc, 0xbb,
	0x3b, 0xe0, 0x6f, 0xaf, 0xc3, 0xdf, 0x69, 0x8a, 0xbf, 0xdb, 0x1e, 0x7f, 0x30, 0xf0, 0xff, 0xa7,
	0x03, 0x97, 0x9f, 0x79, 0xec, 0x2d, 0x2f, 0x42, 0x81, 0x7e, 0xd8, 0x42, 0x0f, 0x8e, 0x36, 0xea,
	0x81, 0xb5, 0x5d, 0x0f, 0x3a, 0x0f, 0xa1, 0x07, 0xdd, 0xed, 0x7a, 0x60, 0xef, 0xaf, 0x07, 0xce,
	0x66, 0x3d, 0x70, 0x77, 0xd5, 0x03, 0x68, 0xa3, 0x07, 0xbd, 0x1d, 0xf6, 0xf1, 0x78, 0xdd, 0x3e,
	0x9e, 0x34, 0xdd, 0xc7, 0xd3, 0xf6, 0xfb, 0x78, 0xa6, 0xf7, 0x71, 0xf4, 0xc3, 0x6f, 0x2f, 0xe2,
	0x84, 0x4d, 0x17, 0x7f, 0xe0, 0x90, 0xce, 0xfc, 0xe7, 0xcf, 0x0a, 0x96, 0x50, 0x3f, 0xa6, 0x4f,
	0xe7, 0x69, 0xb0, 0x8c, 0x73, 0xba, 0xc8, 0x22, 0x3f, 0xce, 0xe7, 0xa1, 0x5f, 0x84, 0x53, 0x32,
	0x0b, 0x8c, 0x7f, 0xfd, 0x3f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x73, 0xfb, 0xe7, 0x99, 0x12, 0x10,
	0x00, 0x00,
}
