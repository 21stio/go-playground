// Code generated by protoc-gen-go. DO NOT EDIT.
// source: company/company_.proto

/*
Package company is a generated protocol buffer package.

It is generated from these files:
	company/company_.proto

It has these top-level messages:
	Company
	Job
*/
package company

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import companykind "github.com/21stio/go-playground/grpc/schema/companykind"
import info "github.com/21stio/go-playground/grpc/schema/info"
import industrykind "github.com/21stio/go-playground/grpc/schema/industrykind"
import location "github.com/21stio/go-playground/grpc/schema/location"
import currencyvalue "github.com/21stio/go-playground/grpc/schema/currencyvalue"
import person "github.com/21stio/go-playground/grpc/schema/person"
import id "github.com/21stio/go-playground/grpc/schema/id"
import service "github.com/21stio/go-playground/grpc/schema/service"
import jobkind "github.com/21stio/go-playground/grpc/schema/jobkind"
import experiencelevelkind "github.com/21stio/go-playground/grpc/schema/experiencelevelkind"
import currencyperduration "github.com/21stio/go-playground/grpc/schema/currencyperduration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Company struct {
	Kind             *companykind.CompanyKind     `protobuf:"varint,1,opt,name=kind,enum=companykind.CompanyKind" json:"kind,omitempty"`
	Info             *info.Info                   `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	IndustryKind     *industrykind.IndustryKind   `protobuf:"varint,3,opt,name=industryKind,enum=industrykind.IndustryKind" json:"industryKind,omitempty"`
	HeadQuarter      *location.Location           `protobuf:"bytes,4,opt,name=headQuarter" json:"headQuarter,omitempty"`
	EmployeeCount    *int32                       `protobuf:"varint,5,opt,name=employeeCount" json:"employeeCount,omitempty"`
	Revenue          *currencyvalue.CurrencyValue `protobuf:"bytes,6,opt,name=revenue" json:"revenue,omitempty"`
	Jobs             []*Job                       `protobuf:"bytes,7,rep,name=jobs" json:"jobs,omitempty"`
	Employees        []*person.Person             `protobuf:"bytes,8,rep,name=employees" json:"employees,omitempty"`
	Hash             *string                      `protobuf:"bytes,9,opt,name=hash" json:"hash,omitempty"`
	Ids              []*id.Id                     `protobuf:"bytes,10,rep,name=ids" json:"ids,omitempty"`
	Meta             *service.TypeMeta            `protobuf:"bytes,11,opt,name=meta" json:"meta,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *Company) Reset()                    { *m = Company{} }
func (m *Company) String() string            { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()               {}
func (*Company) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Company) GetKind() companykind.CompanyKind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return companykind.CompanyKind_VC_FUNDED
}

func (m *Company) GetInfo() *info.Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Company) GetIndustryKind() industrykind.IndustryKind {
	if m != nil && m.IndustryKind != nil {
		return *m.IndustryKind
	}
	return industrykind.IndustryKind_ACCOUNTING
}

func (m *Company) GetHeadQuarter() *location.Location {
	if m != nil {
		return m.HeadQuarter
	}
	return nil
}

func (m *Company) GetEmployeeCount() int32 {
	if m != nil && m.EmployeeCount != nil {
		return *m.EmployeeCount
	}
	return 0
}

func (m *Company) GetRevenue() *currencyvalue.CurrencyValue {
	if m != nil {
		return m.Revenue
	}
	return nil
}

func (m *Company) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *Company) GetEmployees() []*person.Person {
	if m != nil {
		return m.Employees
	}
	return nil
}

func (m *Company) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *Company) GetIds() []*id.Id {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *Company) GetMeta() *service.TypeMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type Job struct {
	Kind             *jobkind.JobKind                          `protobuf:"varint,1,opt,name=kind,enum=jobkind.JobKind" json:"kind,omitempty"`
	Info             *info.Info                                `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Tags             []string                                  `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Benefits         []string                                  `protobuf:"bytes,4,rep,name=benefits" json:"benefits,omitempty"`
	ExperienceLevel  []experiencelevelkind.ExperienceLevelKind `protobuf:"varint,5,rep,name=experienceLevel,enum=experiencelevelkind.ExperienceLevelKind" json:"experienceLevel,omitempty"`
	Remote           *bool                                     `protobuf:"varint,6,opt,name=remote" json:"remote,omitempty"`
	SponsorsVisa     *bool                                     `protobuf:"varint,7,opt,name=sponsorsVisa" json:"sponsorsVisa,omitempty"`
	PaysRelocation   *bool                                     `protobuf:"varint,8,opt,name=paysRelocation" json:"paysRelocation,omitempty"`
	ProvidesEquity   *bool                                     `protobuf:"varint,9,opt,name=providesEquity" json:"providesEquity,omitempty"`
	Salary           *currencyperduration.CurrencyPerDuration  `protobuf:"bytes,10,opt,name=salary" json:"salary,omitempty"`
	Company          *Company                                  `protobuf:"bytes,11,opt,name=company" json:"company,omitempty"`
	Location         *location.Location                        `protobuf:"bytes,12,opt,name=location" json:"location,omitempty"`
	Hash             *string                                   `protobuf:"bytes,13,opt,name=hash" json:"hash,omitempty"`
	Ids              []*id.Id                                  `protobuf:"bytes,14,rep,name=ids" json:"ids,omitempty"`
	Meta             *service.TypeMeta                         `protobuf:"bytes,15,opt,name=meta" json:"meta,omitempty"`
	XXX_unrecognized []byte                                    `json:"-"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Job) GetKind() jobkind.JobKind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return jobkind.JobKind_FULLTIME
}

func (m *Job) GetInfo() *info.Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Job) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Job) GetBenefits() []string {
	if m != nil {
		return m.Benefits
	}
	return nil
}

func (m *Job) GetExperienceLevel() []experiencelevelkind.ExperienceLevelKind {
	if m != nil {
		return m.ExperienceLevel
	}
	return nil
}

func (m *Job) GetRemote() bool {
	if m != nil && m.Remote != nil {
		return *m.Remote
	}
	return false
}

func (m *Job) GetSponsorsVisa() bool {
	if m != nil && m.SponsorsVisa != nil {
		return *m.SponsorsVisa
	}
	return false
}

func (m *Job) GetPaysRelocation() bool {
	if m != nil && m.PaysRelocation != nil {
		return *m.PaysRelocation
	}
	return false
}

func (m *Job) GetProvidesEquity() bool {
	if m != nil && m.ProvidesEquity != nil {
		return *m.ProvidesEquity
	}
	return false
}

func (m *Job) GetSalary() *currencyperduration.CurrencyPerDuration {
	if m != nil {
		return m.Salary
	}
	return nil
}

func (m *Job) GetCompany() *Company {
	if m != nil {
		return m.Company
	}
	return nil
}

func (m *Job) GetLocation() *location.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Job) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *Job) GetIds() []*id.Id {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *Job) GetMeta() *service.TypeMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*Company)(nil), "company.Company")
	proto.RegisterType((*Job)(nil), "company.Job")
}

func init() { proto.RegisterFile("company/company_.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x51, 0x6f, 0xdb, 0x36,
	0x10, 0xc7, 0xe1, 0x49, 0xb1, 0x1d, 0xda, 0x71, 0x32, 0x62, 0x08, 0x08, 0x63, 0x08, 0x04, 0x23,
	0x1b, 0x84, 0x21, 0xa3, 0x30, 0x6f, 0xeb, 0x63, 0x51, 0x34, 0xcd, 0x43, 0xd2, 0x14, 0x48, 0x89,
	0x22, 0x0f, 0x7d, 0x29, 0x68, 0xe9, 0x62, 0x33, 0xb5, 0x49, 0x95, 0x94, 0x8c, 0xea, 0x4b, 0x16,
	0xfd, 0x48, 0x85, 0x68, 0x52, 0xb1, 0x52, 0xa7, 0x40, 0x5f, 0xcc, 0xbb, 0x3f, 0x7f, 0xa4, 0xce,
	0x77, 0x7f, 0x09, 0x1d, 0xa7, 0x6a, 0x95, 0x73, 0x59, 0x25, 0x6e, 0xfd, 0x40, 0x73, 0xad, 0x0a,
	0x85, 0x7b, 0x2e, 0x1f, 0x9f, 0xb8, 0xe0, 0xa3, 0x90, 0x59, 0xb2, 0x15, 0x3b, 0x70, 0x7c, 0x24,
	0xe4, 0x9d, 0x4a, 0xea, 0x1f, 0xaf, 0x44, 0x42, 0x66, 0xa5, 0x29, 0xf4, 0xe6, 0xc8, 0x76, 0xe2,
	0x09, 0xb2, 0x54, 0x29, 0x2f, 0x84, 0x92, 0x89, 0x0f, 0xfc, 0xce, 0x24, 0x2d, 0xb5, 0x06, 0x99,
	0x56, 0x6b, 0xbe, 0x2c, 0x21, 0x69, 0x65, 0x9e, 0xf9, 0x2d, 0x07, 0x6d, 0x94, 0x4c, 0x36, 0x8b,
	0x57, 0x87, 0x22, 0x4b, 0x44, 0xf3, 0x84, 0x63, 0x03, 0x7a, 0x2d, 0x52, 0x48, 0xdc, 0xda, 0xe8,
	0xf7, 0x6a, 0x66, 0xcb, 0x72, 0xab, 0xd7, 0x29, 0x7c, 0xce, 0x41, 0x0b, 0x90, 0x29, 0x2c, 0x61,
	0x0d, 0x4b, 0xcb, 0xec, 0xd0, 0x1a, 0xde, 0x57, 0x96, 0x83, 0xce, 0x4a, 0xbd, 0xf9, 0x33, 0x3b,
	0x34, 0xc7, 0x4f, 0xbe, 0x06, 0xa8, 0x77, 0xbe, 0x69, 0x1e, 0x3e, 0x43, 0x61, 0x7d, 0x15, 0xe9,
	0x44, 0x9d, 0x78, 0x34, 0x25, 0x74, 0xab, 0xa9, 0xd4, 0x31, 0xaf, 0x85, 0xcc, 0x98, 0xa5, 0xf0,
	0x09, 0x0a, 0xeb, 0xe6, 0x92, 0x5f, 0xa2, 0x4e, 0x3c, 0x98, 0x22, 0x5a, 0x27, 0xf4, 0x52, 0xde,
	0x29, 0x66, 0x75, 0xfc, 0x1c, 0x0d, 0x7d, 0x8b, 0xeb, 0x53, 0x24, 0xb0, 0xb7, 0x8e, 0xe9, 0x76,
	0xdf, 0xe9, 0xe5, 0x16, 0xc1, 0x5a, 0x3c, 0xfe, 0x0f, 0x0d, 0x16, 0xc0, 0xb3, 0xb7, 0x25, 0xd7,
	0x05, 0x68, 0x12, 0xda, 0xc7, 0x60, 0xea, 0x07, 0x43, 0xaf, 0x5d, 0xc0, 0xb6, 0x31, 0x7c, 0x8a,
	0x0e, 0x60, 0x95, 0x2f, 0x55, 0x05, 0x70, 0xae, 0x4a, 0x59, 0x90, 0xbd, 0xa8, 0x13, 0xef, 0xb1,
	0xb6, 0x88, 0x9f, 0xa1, 0x9e, 0x86, 0x35, 0xc8, 0x12, 0x48, 0xd7, 0xde, 0xfb, 0x3b, 0x6d, 0x4d,
	0x94, 0x9e, 0xbb, 0xec, 0xb6, 0xce, 0x98, 0x87, 0x71, 0x84, 0xc2, 0x7b, 0x35, 0x33, 0xa4, 0x17,
	0x05, 0xf1, 0x60, 0x3a, 0xf4, 0x1d, 0xa2, 0x57, 0x6a, 0xc6, 0xec, 0x0e, 0x3e, 0x43, 0xfb, 0xfe,
	0x51, 0x86, 0xf4, 0x2d, 0x36, 0xa2, 0x1b, 0x43, 0xd0, 0x1b, 0xbb, 0xb0, 0x07, 0x00, 0x63, 0x14,
	0x2e, 0xb8, 0x59, 0x90, 0xfd, 0xa8, 0x13, 0xef, 0x33, 0x1b, 0x63, 0x82, 0x02, 0x91, 0x19, 0x82,
	0xec, 0xd9, 0x2e, 0x15, 0x19, 0xbd, 0xcc, 0x58, 0x2d, 0xe1, 0x3f, 0x50, 0xb8, 0x82, 0x82, 0x93,
	0x81, 0x2d, 0xf9, 0x57, 0xea, 0x2c, 0x44, 0xdf, 0x55, 0x39, 0xbc, 0x81, 0x82, 0x33, 0xbb, 0x3d,
	0xf9, 0x12, 0xa2, 0xe0, 0x4a, 0xcd, 0xf0, 0x69, 0x6b, 0x9c, 0x47, 0xd4, 0x39, 0xab, 0x2e, 0xf6,
	0x27, 0xc6, 0x88, 0x51, 0x58, 0xf0, 0xb9, 0x21, 0x41, 0x14, 0xd4, 0x25, 0xd6, 0x31, 0x1e, 0xa3,
	0xfe, 0x0c, 0x24, 0xdc, 0x89, 0xc2, 0x90, 0xd0, 0xea, 0x4d, 0x8e, 0x19, 0x3a, 0x7c, 0xb0, 0xe7,
	0x75, 0x6d, 0x4f, 0xb2, 0x17, 0x05, 0xf1, 0x68, 0x1a, 0xef, 0xb2, 0x32, 0xbd, 0x68, 0xb3, 0xb6,
	0xb0, 0xc7, 0x17, 0xe0, 0x63, 0xd4, 0xd5, 0xb0, 0x52, 0xc5, 0x66, 0x5a, 0x7d, 0xe6, 0x32, 0x3c,
	0x41, 0x43, 0x93, 0x2b, 0x69, 0x94, 0x36, 0xb7, 0xc2, 0x70, 0xd2, 0xb3, 0xbb, 0x2d, 0x0d, 0xff,
	0x89, 0x46, 0x39, 0xaf, 0x0c, 0x03, 0x6f, 0x1c, 0xd2, 0xb7, 0xd4, 0x23, 0xd5, 0x72, 0x5a, 0xad,
	0x45, 0x06, 0xe6, 0xe2, 0x53, 0x29, 0x8a, 0xca, 0x0e, 0xa5, 0xe6, 0x5a, 0x2a, 0x7e, 0x81, 0xba,
	0x86, 0x2f, 0xb9, 0xae, 0x08, 0xb2, 0x1d, 0x8b, 0x77, 0xbd, 0x71, 0x8d, 0x7f, 0x6e, 0x40, 0xbf,
	0x72, 0x1a, 0x73, 0xe7, 0xf0, 0x5f, 0xc8, 0x7f, 0xc3, 0xdc, 0x24, 0x8f, 0x1a, 0x1f, 0xb9, 0xb7,
	0x8c, 0x79, 0x00, 0x53, 0xd4, 0x6f, 0xea, 0x1e, 0x3e, 0xf9, 0x06, 0x34, 0x4c, 0x63, 0xa8, 0x83,
	0xef, 0x0d, 0x35, 0x7a, 0xda, 0x50, 0x87, 0x3f, 0x34, 0xd4, 0xcb, 0xff, 0xdf, 0xff, 0x3b, 0x17,
	0xc5, 0xa2, 0x9c, 0xd5, 0x75, 0x26, 0xd3, 0x7f, 0x4c, 0x21, 0x54, 0x32, 0x57, 0x7f, 0xe7, 0x4b,
	0x5e, 0xcd, 0xb5, 0x2a, 0x65, 0x96, 0xcc, 0x75, 0x9e, 0x26, 0x26, 0x5d, 0xc0, 0x8a, 0xfb, 0x6f,
	0xf1, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xff, 0xe3, 0x71, 0xc2, 0x05, 0x00, 0x00,
}
