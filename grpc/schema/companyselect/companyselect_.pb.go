// Code generated by protoc-gen-go. DO NOT EDIT.
// source: companyselect/companyselect_.proto

/*
Package companyselect is a generated protocol buffer package.

It is generated from these files:
	companyselect/companyselect_.proto

It has these top-level messages:
	CompanySelect
	JobsSelect
*/
package companyselect

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import infoselect "github.com/21stio/go-playground/grpc/schema/infoselect"
import locationselect "github.com/21stio/go-playground/grpc/schema/locationselect"
import currencyvalueselect "github.com/21stio/go-playground/grpc/schema/currencyvalueselect"
import personsselect "github.com/21stio/go-playground/grpc/schema/personsselect"
import idsselect "github.com/21stio/go-playground/grpc/schema/idsselect"
import serviceselect "github.com/21stio/go-playground/grpc/schema/serviceselect"
import companyfilter "github.com/21stio/go-playground/grpc/schema/companyfilter"
import jobsort "github.com/21stio/go-playground/grpc/schema/jobsort"
import page "github.com/21stio/go-playground/grpc/schema/page"
import currencyperdurationselect "github.com/21stio/go-playground/grpc/schema/currencyperdurationselect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CompanySelect struct {
	SelectAll        *bool                                    `protobuf:"varint,1,opt,name=selectAll" json:"selectAll,omitempty"`
	Kind             *bool                                    `protobuf:"varint,2,opt,name=kind" json:"kind,omitempty"`
	Info             *infoselect.InfoSelect                   `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
	IndustryKind     *bool                                    `protobuf:"varint,4,opt,name=industryKind" json:"industryKind,omitempty"`
	HeadQuarter      *locationselect.LocationSelect           `protobuf:"bytes,5,opt,name=headQuarter" json:"headQuarter,omitempty"`
	EmployeeCount    *bool                                    `protobuf:"varint,6,opt,name=employeeCount" json:"employeeCount,omitempty"`
	Revenue          *currencyvalueselect.CurrencyValueSelect `protobuf:"bytes,7,opt,name=revenue" json:"revenue,omitempty"`
	Jobs             *JobsSelect                              `protobuf:"bytes,8,opt,name=jobs" json:"jobs,omitempty"`
	Employees        *personsselect.PersonsSelect             `protobuf:"bytes,9,opt,name=employees" json:"employees,omitempty"`
	SelectHash       *bool                                    `protobuf:"varint,10,opt,name=selectHash" json:"selectHash,omitempty"`
	Ids              *idsselect.IdsSelect                     `protobuf:"bytes,11,opt,name=ids" json:"ids,omitempty"`
	Meta             *serviceselect.TypeMetaSelect            `protobuf:"bytes,12,opt,name=meta" json:"meta,omitempty"`
	Hash             *string                                  `protobuf:"bytes,13,opt,name=hash" json:"hash,omitempty"`
	XXX_unrecognized []byte                                   `json:"-"`
}

func (m *CompanySelect) Reset()                    { *m = CompanySelect{} }
func (m *CompanySelect) String() string            { return proto.CompactTextString(m) }
func (*CompanySelect) ProtoMessage()               {}
func (*CompanySelect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CompanySelect) GetSelectAll() bool {
	if m != nil && m.SelectAll != nil {
		return *m.SelectAll
	}
	return false
}

func (m *CompanySelect) GetKind() bool {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return false
}

func (m *CompanySelect) GetInfo() *infoselect.InfoSelect {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CompanySelect) GetIndustryKind() bool {
	if m != nil && m.IndustryKind != nil {
		return *m.IndustryKind
	}
	return false
}

func (m *CompanySelect) GetHeadQuarter() *locationselect.LocationSelect {
	if m != nil {
		return m.HeadQuarter
	}
	return nil
}

func (m *CompanySelect) GetEmployeeCount() bool {
	if m != nil && m.EmployeeCount != nil {
		return *m.EmployeeCount
	}
	return false
}

func (m *CompanySelect) GetRevenue() *currencyvalueselect.CurrencyValueSelect {
	if m != nil {
		return m.Revenue
	}
	return nil
}

func (m *CompanySelect) GetJobs() *JobsSelect {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *CompanySelect) GetEmployees() *personsselect.PersonsSelect {
	if m != nil {
		return m.Employees
	}
	return nil
}

func (m *CompanySelect) GetSelectHash() bool {
	if m != nil && m.SelectHash != nil {
		return *m.SelectHash
	}
	return false
}

func (m *CompanySelect) GetIds() *idsselect.IdsSelect {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *CompanySelect) GetMeta() *serviceselect.TypeMetaSelect {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CompanySelect) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

type JobsSelect struct {
	Filter           *companyfilter.JobFilter                             `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	Sort             *jobsort.JobSort                                     `protobuf:"bytes,2,opt,name=sort" json:"sort,omitempty"`
	Page             *page.Page                                           `protobuf:"bytes,3,opt,name=page" json:"page,omitempty"`
	SelectAll        *bool                                                `protobuf:"varint,4,opt,name=selectAll" json:"selectAll,omitempty"`
	Kind             *bool                                                `protobuf:"varint,5,opt,name=kind" json:"kind,omitempty"`
	Info             *infoselect.InfoSelect                               `protobuf:"bytes,6,opt,name=info" json:"info,omitempty"`
	Tags             *bool                                                `protobuf:"varint,7,opt,name=tags" json:"tags,omitempty"`
	Benefits         *bool                                                `protobuf:"varint,8,opt,name=benefits" json:"benefits,omitempty"`
	ExperienceLevel  *bool                                                `protobuf:"varint,9,opt,name=experienceLevel" json:"experienceLevel,omitempty"`
	Remote           *bool                                                `protobuf:"varint,10,opt,name=remote" json:"remote,omitempty"`
	SponsorsVisa     *bool                                                `protobuf:"varint,11,opt,name=sponsorsVisa" json:"sponsorsVisa,omitempty"`
	PaysRelocation   *bool                                                `protobuf:"varint,12,opt,name=paysRelocation" json:"paysRelocation,omitempty"`
	ProvidesEquity   *bool                                                `protobuf:"varint,13,opt,name=providesEquity" json:"providesEquity,omitempty"`
	Salary           *currencyperdurationselect.CurrencyPerDurationSelect `protobuf:"bytes,14,opt,name=salary" json:"salary,omitempty"`
	Company          *CompanySelect                                       `protobuf:"bytes,15,opt,name=company" json:"company,omitempty"`
	Location         *locationselect.LocationSelect                       `protobuf:"bytes,16,opt,name=location" json:"location,omitempty"`
	SelectHash       *bool                                                `protobuf:"varint,17,opt,name=selectHash" json:"selectHash,omitempty"`
	Ids              *idsselect.IdsSelect                                 `protobuf:"bytes,18,opt,name=ids" json:"ids,omitempty"`
	Meta             *serviceselect.TypeMetaSelect                        `protobuf:"bytes,19,opt,name=meta" json:"meta,omitempty"`
	Hash             *string                                              `protobuf:"bytes,20,opt,name=hash" json:"hash,omitempty"`
	XXX_unrecognized []byte                                               `json:"-"`
}

func (m *JobsSelect) Reset()                    { *m = JobsSelect{} }
func (m *JobsSelect) String() string            { return proto.CompactTextString(m) }
func (*JobsSelect) ProtoMessage()               {}
func (*JobsSelect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JobsSelect) GetFilter() *companyfilter.JobFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *JobsSelect) GetSort() *jobsort.JobSort {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *JobsSelect) GetPage() *page.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *JobsSelect) GetSelectAll() bool {
	if m != nil && m.SelectAll != nil {
		return *m.SelectAll
	}
	return false
}

func (m *JobsSelect) GetKind() bool {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return false
}

func (m *JobsSelect) GetInfo() *infoselect.InfoSelect {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *JobsSelect) GetTags() bool {
	if m != nil && m.Tags != nil {
		return *m.Tags
	}
	return false
}

func (m *JobsSelect) GetBenefits() bool {
	if m != nil && m.Benefits != nil {
		return *m.Benefits
	}
	return false
}

func (m *JobsSelect) GetExperienceLevel() bool {
	if m != nil && m.ExperienceLevel != nil {
		return *m.ExperienceLevel
	}
	return false
}

func (m *JobsSelect) GetRemote() bool {
	if m != nil && m.Remote != nil {
		return *m.Remote
	}
	return false
}

func (m *JobsSelect) GetSponsorsVisa() bool {
	if m != nil && m.SponsorsVisa != nil {
		return *m.SponsorsVisa
	}
	return false
}

func (m *JobsSelect) GetPaysRelocation() bool {
	if m != nil && m.PaysRelocation != nil {
		return *m.PaysRelocation
	}
	return false
}

func (m *JobsSelect) GetProvidesEquity() bool {
	if m != nil && m.ProvidesEquity != nil {
		return *m.ProvidesEquity
	}
	return false
}

func (m *JobsSelect) GetSalary() *currencyperdurationselect.CurrencyPerDurationSelect {
	if m != nil {
		return m.Salary
	}
	return nil
}

func (m *JobsSelect) GetCompany() *CompanySelect {
	if m != nil {
		return m.Company
	}
	return nil
}

func (m *JobsSelect) GetLocation() *locationselect.LocationSelect {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *JobsSelect) GetSelectHash() bool {
	if m != nil && m.SelectHash != nil {
		return *m.SelectHash
	}
	return false
}

func (m *JobsSelect) GetIds() *idsselect.IdsSelect {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *JobsSelect) GetMeta() *serviceselect.TypeMetaSelect {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *JobsSelect) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*CompanySelect)(nil), "companyselect.CompanySelect")
	proto.RegisterType((*JobsSelect)(nil), "companyselect.JobsSelect")
}

func init() { proto.RegisterFile("companyselect/companyselect_.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 744 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x51, 0x6f, 0xd3, 0x3c,
	0x14, 0x55, 0xbf, 0x65, 0x5d, 0xea, 0xae, 0xdb, 0x3e, 0x33, 0x4d, 0xa1, 0x1a, 0xd3, 0x54, 0x4d,
	0x53, 0x85, 0x34, 0x87, 0x55, 0x08, 0x89, 0xf1, 0x02, 0x1b, 0x20, 0x06, 0x43, 0x1a, 0x19, 0xda,
	0x03, 0x2f, 0xc8, 0x4d, 0x6e, 0xdb, 0x40, 0x1a, 0x07, 0xdb, 0xa9, 0xc8, 0x4f, 0xe1, 0x97, 0xf0,
	0xf7, 0x90, 0x5d, 0x3b, 0x9d, 0xc7, 0x2a, 0x8d, 0x97, 0xd6, 0xf7, 0xf8, 0xf8, 0xde, 0x5c, 0x9f,
	0x73, 0x13, 0xd4, 0x8b, 0xd9, 0xb4, 0xa0, 0x79, 0x25, 0x20, 0x83, 0x58, 0x86, 0x4e, 0xf4, 0x95,
	0x14, 0x9c, 0x49, 0x86, 0x3b, 0x0e, 0xda, 0xdd, 0x4d, 0xf3, 0x11, 0x33, 0xfc, 0xc5, 0xd2, 0x90,
	0xbb, 0x07, 0x19, 0x8b, 0xa9, 0x4c, 0x59, 0x6e, 0x18, 0x6e, 0x68, 0x59, 0x24, 0x2e, 0x39, 0x87,
	0x3c, 0xae, 0x66, 0x34, 0x2b, 0xc1, 0x16, 0xff, 0x1b, 0xb3, 0xfc, 0x5e, 0x01, 0x5c, 0xb0, 0x5c,
	0x18, 0xa6, 0x13, 0x59, 0x4e, 0x37, 0x4d, 0xec, 0x7e, 0xbd, 0xaa, 0xcf, 0x0b, 0xe0, 0xb3, 0x34,
	0xb6, 0x95, 0x9c, 0xa8, 0xe6, 0x98, 0x36, 0x47, 0x69, 0x26, 0x81, 0x87, 0x4e, 0x64, 0x39, 0x3b,
	0xdf, 0xd8, 0x50, 0x30, 0x2e, 0x43, 0xf3, 0x6f, 0xf1, 0xad, 0x82, 0x8e, 0x21, 0x54, 0x3f, 0x16,
	0x39, 0xb1, 0xdd, 0x14, 0xc0, 0x93, 0x92, 0xdf, 0xbc, 0x92, 0xa5, 0x3b, 0xe6, 0x6c, 0xef, 0xb7,
	0x87, 0x3a, 0x67, 0xf3, 0xf2, 0x57, 0x7a, 0x03, 0xef, 0xa2, 0xd6, 0x9c, 0xf2, 0x2a, 0xcb, 0x82,
	0xc6, 0x7e, 0xa3, 0xef, 0x47, 0x0b, 0x00, 0x63, 0xe4, 0x7d, 0x4f, 0xf3, 0x24, 0xf8, 0x4f, 0x6f,
	0xe8, 0x35, 0x7e, 0x8c, 0x3c, 0x25, 0x4e, 0xb0, 0xb2, 0xdf, 0xe8, 0xb7, 0x07, 0x3b, 0x64, 0xa1,
	0x14, 0x39, 0xcf, 0x47, 0x6c, 0x9e, 0x37, 0xd2, 0x1c, 0xdc, 0x43, 0xeb, 0x69, 0x9e, 0x94, 0x42,
	0xf2, 0xea, 0x83, 0xca, 0xe3, 0xe9, 0x3c, 0x0e, 0x86, 0x5f, 0xa2, 0xf6, 0x04, 0x68, 0xf2, 0xa9,
	0xa4, 0x5c, 0x02, 0x0f, 0x56, 0x75, 0xda, 0x3d, 0xe2, 0xca, 0x4b, 0x2e, 0x4c, 0x68, 0xd2, 0xdf,
	0x3c, 0x82, 0x0f, 0x50, 0x07, 0xa6, 0x45, 0xc6, 0x2a, 0x80, 0x33, 0x56, 0xe6, 0x32, 0x68, 0xea,
	0x32, 0x2e, 0x88, 0x4f, 0xd1, 0x1a, 0x87, 0x19, 0xe4, 0x25, 0x04, 0x6b, 0xba, 0x46, 0xff, 0x2e,
	0xaf, 0x90, 0x33, 0x83, 0x5d, 0x2b, 0xcc, 0x54, 0xb3, 0x07, 0xf1, 0x11, 0xf2, 0x94, 0x3e, 0x81,
	0xaf, 0x13, 0x3c, 0x24, 0x8e, 0x7f, 0xc9, 0x7b, 0x36, 0x14, 0xb6, 0x7d, 0x45, 0xc3, 0x27, 0xa8,
	0x65, 0x9f, 0x41, 0x04, 0x2d, 0x7d, 0x66, 0x97, 0x38, 0x16, 0x23, 0x97, 0xf3, 0xc8, 0x1c, 0x5b,
	0xd0, 0xf1, 0x1e, 0x42, 0x73, 0xca, 0x3b, 0x2a, 0x26, 0x01, 0xd2, 0x1d, 0xdd, 0x40, 0xf0, 0x21,
	0x5a, 0x49, 0x13, 0x11, 0xb4, 0x75, 0xd6, 0x6d, 0x52, 0x1b, 0x93, 0x9c, 0x27, 0x36, 0x9b, 0x22,
	0xe0, 0x63, 0xe4, 0x4d, 0x41, 0xd2, 0x60, 0x5d, 0x13, 0x1f, 0x11, 0xc7, 0xa1, 0xe4, 0x73, 0x55,
	0xc0, 0x47, 0x90, 0xd4, 0x3e, 0xb6, 0xa2, 0x2a, 0xd5, 0x27, 0xaa, 0x68, 0x67, 0xbf, 0xd1, 0x6f,
	0x45, 0x7a, 0xdd, 0xfb, 0xd5, 0x44, 0x68, 0xd1, 0x1f, 0x7e, 0x82, 0x9a, 0x73, 0xff, 0x6a, 0xcf,
	0xb4, 0x07, 0x01, 0x71, 0x5c, 0xad, 0xae, 0xe2, 0xad, 0x5e, 0x45, 0x86, 0x87, 0x0f, 0x90, 0xa7,
	0x7c, 0xad, 0xad, 0xd4, 0x1e, 0x6c, 0x11, 0xe3, 0x73, 0xc5, 0xbc, 0x62, 0x5c, 0x46, 0x7a, 0x17,
	0xef, 0x21, 0x4f, 0x79, 0xdd, 0x98, 0x0b, 0x11, 0x15, 0x90, 0x4b, 0x3a, 0x86, 0x48, 0xe3, 0xae,
	0x5d, 0xbd, 0x65, 0x76, 0x5d, 0xbd, 0xc3, 0xae, 0xcd, 0x7b, 0xd8, 0x15, 0x23, 0x4f, 0xd2, 0xb1,
	0xd0, 0xfe, 0xf0, 0x23, 0xbd, 0xc6, 0x5d, 0xe4, 0x0f, 0x21, 0x87, 0x51, 0x2a, 0xe7, 0xb2, 0xfb,
	0x51, 0x1d, 0xe3, 0x3e, 0xda, 0x84, 0x9f, 0x05, 0xf0, 0x14, 0xf2, 0x18, 0x2e, 0x60, 0x06, 0x99,
	0x56, 0xd9, 0x8f, 0x6e, 0xc3, 0x78, 0x07, 0x35, 0x39, 0x4c, 0x99, 0x04, 0xa3, 0xa4, 0x89, 0xd4,
	0x80, 0x88, 0x82, 0xe5, 0x82, 0x71, 0x71, 0x9d, 0x0a, 0xaa, 0xe5, 0xf4, 0x23, 0x07, 0xc3, 0x87,
	0x68, 0xa3, 0xa0, 0x95, 0x88, 0xc0, 0x8e, 0x84, 0xd6, 0xd2, 0x8f, 0x6e, 0xa1, 0x9a, 0xc7, 0xd9,
	0x2c, 0x4d, 0x40, 0xbc, 0xf9, 0x51, 0xa6, 0xb2, 0xd2, 0x02, 0x2a, 0x9e, 0x83, 0xe2, 0x0b, 0xd4,
	0x14, 0x34, 0xa3, 0xbc, 0x0a, 0x36, 0xf4, 0x9d, 0x3c, 0x25, 0x4b, 0xdf, 0x1b, 0xf5, 0x34, 0x5c,
	0x02, 0x7f, 0x6d, 0x76, 0xcc, 0x8d, 0x99, 0x1c, 0xf8, 0x19, 0x5a, 0x33, 0xd2, 0x07, 0x9b, 0xc6,
	0xe1, 0xee, 0x54, 0x38, 0xef, 0x9b, 0xc8, 0x92, 0xf1, 0x09, 0xf2, 0xeb, 0x7e, 0xb6, 0xee, 0x35,
	0xf3, 0x35, 0xff, 0xd6, 0x6c, 0xfc, 0xbf, 0x6c, 0x36, 0xf0, 0x7d, 0x67, 0xe3, 0xc1, 0xbf, 0xcf,
	0xc6, 0xf6, 0x62, 0x36, 0x4e, 0x5f, 0x7c, 0x79, 0x3e, 0x4e, 0xe5, 0xa4, 0x1c, 0xaa, 0xce, 0xc3,
	0xc1, 0xb1, 0x90, 0x29, 0x0b, 0xc7, 0xec, 0xa8, 0xc8, 0x68, 0x35, 0xe6, 0xac, 0xcc, 0x93, 0x70,
	0xcc, 0x8b, 0x38, 0x14, 0xf1, 0x04, 0xa6, 0xd4, 0xfd, 0x14, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xbf, 0x48, 0x8e, 0xfd, 0x28, 0x07, 0x00, 0x00,
}
